 #include <stdio.h>  
 #include <stdlib.h>  
 #include <stddef.h>  
 #include <string.h>  
 #include <sys/stat.h>
 #include <curl/curl.h>
 #include "json.h"  

 
 #define MAX_BUF     65536
 char wr_buf[MAX_BUF+1];
 int wr_index;

 #define REMOTE_URL 	"http://14.23.145.210"
 #define LOCAL_FILE     "/tmp/upload.txt"

 #define CONNECTTIMEOUT 5
 #define TIMEOUT 		10
 
 size_t write_data(void *buffer, size_t size, size_t nmemb, void *userp );
 size_t read_data(void *ptr, size_t size, size_t nmemb, void *stream);



 int test_jsonc()	
 {	
	 CURL *curl;
	 CURLcode ret;
	 FILE *hd_src;
     struct stat file_info;
     curl_off_t fsize;
	 int  wr_error = 0,wr_index = 0;
	 
	 const char *data = "data to send";
	 
	 curl = curl_easy_init();//初始化libcurl库
	 if (!curl) {
		printf("couldn't init curl!\n");
		return -1;
	 }

	 ////////////////////////////////////////
 	 struct json_object *newobj = NULL;
	 //const char *mystr="{\"studentid\":\"123\", \"name\":\"Jacky\", \"info\":[{\"age\":18},{\"sex\":\"male\"}]}";
	 const char *mystr="{\"timestamp\":1428042275, \"platform\":1, \"userinfo\":\"userid:gzzxc001\", \"type\": 1}";

	 newobj = json_tokener_parse(mystr);//将符合json格式的字符串构造为一个json对象
	 if(is_error(newobj)) 
	 {
		 printf("json_tokener_parse err!\n");
	 }
 	 ////////////////////////////////////////
#if 1
	  struct json_object *infor_object = NULL;	
	  infor_object = json_object_new_object();	
	  if (NULL == infor_object)  
	  {  
		  printf("new json object failed.\n");	
		  return;  
	  }  
	  
	  struct json_object *para_object = NULL;  
	  para_object = json_object_new_object();  
	  if (NULL == para_object)	
	  {  
		  json_object_put(infor_object);//free	
		  json_object_put(newobj);//free	 
		  printf("new json object failed.\n");	
		  return;  
	  }  
	
	  json_object_object_add(para_object, "timestamp", json_object_new_int(1428042275));  
	  json_object_object_add(para_object, "platform", json_object_new_int(1));  
	  json_object_object_add(para_object, "userinfo", json_object_new_string("userid:gzzxc001"));  
	  json_object_object_add(para_object, "type", json_object_new_int(1));  
	  //json_object_object_add(para_object, "data", json_object_new_string("C99486C1AA1897DE48650DC10C2BECB796D3F43CA80F884DE22023F22E0C359398EA8F3C3A8D3965024F8FFEF9F4E4F17AACBFEF799F113279B4BEDEA9B3541D1A0E156475F7E2DC"));	
	  //json_object_object_add(para_object, "mac", json_object_new_string("D99C278A"));  

 
	  /*添加json名称和值到json对象集合中*/	
	  //json_object_object_add(newobj, "param", para_object);	  
	  json_object_object_add(infor_object, "param", para_object);	  

	  
	  printf("--------------------json infor-----------------\n");	
	  printf("%s\n", json_object_to_json_string(newobj));  
	  printf("%s\n", json_object_to_json_string(infor_object)); 
	  printf("--------------------json infor-----------------\n");	
	 
#endif	 
	 //----------------URL相关设置----------------//
	 //指定url
	 ret = curl_easy_setopt( curl, CURLOPT_URL, REMOTE_URL);
	 ret = curl_easy_setopt( curl, CURLOPT_CONNECTTIMEOUT, CONNECTTIMEOUT);////设置连接超时s

	 ret = curl_easy_setopt(curl, CURLOPT_TIMEOUT, TIMEOUT);//设置cURL允许执行的最长秒数
     ret = curl_easy_setopt(curl, CURLOPT_NOSIGNAL, 1);//屏蔽其它信号
	 ret = curl_easy_setopt(curl, CURLOPT_HEADER, 1);//下载数据包括HTTP头部

	 //设置http发送的内容类型为JSON 
	 struct curl_slist *plist = NULL;
	 plist = curl_slist_append(plist,"Content-Type:application/json;charset=UTF-8");  
	 ret = curl_easy_setopt(curl, CURLOPT_HTTPHEADER, plist);//设置消息头

	 //设置要POST的JSON数据
     ret = curl_easy_setopt( curl, CURLOPT_POSTFIELDS, data);

	 //--------------------download---------------------//
	 ret = curl_easy_setopt( curl, CURLOPT_WRITEDATA, (void *)&wr_buf);
     ret = curl_easy_setopt( curl, CURLOPT_WRITEFUNCTION, write_data );//下载
#if 1
	 //--------------------upload---------------------//
	 /* get the file size of the local file */ 
     if(stat(LOCAL_FILE, &file_info)) {
	     printf("can't open '%s'\n", LOCAL_FILE);
	     return 1;
     }
  	 fsize = (curl_off_t)file_info.st_size;
     printf("Local file size: %d bytes.\n", fsize);
 
     /* get a FILE * of the same file */ 
     hd_src = fopen(LOCAL_FILE, "rb");

	 ret = curl_easy_setopt(curl, CURLOPT_READFUNCTION, read_data);//上传
	 ret = curl_easy_setopt(curl, CURLOPT_UPLOAD, 1L);//enable uploading

	 /* now specify which file to upload */ 
     ret = curl_easy_setopt(curl, CURLOPT_READDATA, hd_src);
	 
	 /* Set the size of the file to upload (optional)*/
	 ret = curl_easy_setopt(curl, CURLOPT_INFILESIZE_LARGE,(curl_off_t)fsize);
#endif  

   	 ret = curl_easy_perform( curl ); //transfer http   	 
     if(ret != CURLE_OK){      
	 	fprintf(stderr,"curl_easy_perform() failed: %s\n",curl_easy_strerror(ret));
     }
	 printf("line:%d\n",__LINE__);	



	 fclose(hd_src); /* close the local file */ 
	 curl_slist_free_all(plist);	
     curl_easy_cleanup(curl);
     curl_global_cleanup();  
    
	 json_object_put(infor_object);//free	

	 return 0;
 }	
   
   
int main(int argc, char *argv[])  
{	
	int ret = -1;

	ret = test_jsonc();	

	return 0;	
}


 size_t write_data(void *buffer, size_t size, size_t nmemb, void *userp )
 {
	//printf("in write func.......\n");

	
	int segsize = size * nmemb;
	if ( wr_index + segsize > MAX_BUF ) {
			*(int *)userp = 1;
			return 0;
	}
   
	memcpy( (void *)&wr_buf[wr_index], buffer, (size_t)segsize );
   
	wr_index += segsize;
   
	wr_buf[wr_index] = 0;
   
	return segsize;
 }

size_t read_data(void *ptr, size_t size, size_t nmemb, void *stream)
{
  curl_off_t nread;

  printf("in read func.......\n");
  
  size_t retcode = fread(ptr, size, nmemb, stream);
  nread = (curl_off_t)retcode;
  fprintf(stderr, "*** We read %d bytes from file\n", nread);
  
  return retcode;
}

